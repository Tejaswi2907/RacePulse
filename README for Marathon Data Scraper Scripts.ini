Overview
This repository contains two Python scripts for web scraping and extracting marathon data from HTML pages:
    1. marathon_datascrape.py: This script is used to fetch HTML data from a given URL, parse it, and save it in either CSV or XML format.
    2. marathon_webscrape.py: This script is used to extract specific marathon data from an HTML file containing race results and export the data into a structured CSV file.


Requirements:
To run these scripts, you need the following Python packages installed:
    • requests
    • BeautifulSoup4
    • pandas
    • lxml (optional, for XML parsing)


You can install them using:
pip install requests beautifulsoup4 pandas lxml


Usage:
1. marathon_datascrape.py
This script is used for scraping web data from a URL and saving it as CSV or XML.

Command Line Arguments
    • <url>: The URL of the website to scrape.
    • <html_tag>: The HTML tag to target while scraping.
    • <output_format>: The format for saving output, either csv or xml.
    • [class_name] (optional): The class name of the HTML element to scrape.


Example Usage:
python marathon_datascrape.py https://example.com/results div csv
This command will scrape all div elements from the URL and save them in a CSV file named output.csv.

2. marathon_webscrape.py
This script is used for extracting marathon race results from an HTML file.

Function Overview:
    • extract_marathon_data(file_path): Extracts marathon data from the provided HTML file and returns it as a DataFrame.

Example Usage:
from marathon_webscrape import extract_marathon_data
import pandas as pd

file_path = 'path_to_html_file.html'
df = extract_marathon_data(file_path)
df.to_csv('output.csv', index=False)
This example will parse the HTML file specified by file_path, extract marathon data, and save it into output.csv.

Output Files:
    • CSV: Contains the structured data extracted from HTML pages, easily usable for data analysis.
    • XML: (marathon_datascrape.py) Contains hierarchical data from the web pages, stored in XML format.
    
Notes:
    • Ensure that the HTML files for marathon_webscrape.py are well-formed for accurate parsing.
    • The scripts should be run in a terminal or Python environment where necessary permissions to read/write files are available.
